ds_dstools_matrix1 <- ds_prog_matrix[, ds_cols %in% ds_dstools_prop$ds_tools]
ds_dstools_matrix1
ds_dstools_df <- as.data.frame(ds_dstools_matrix1)
# Compute new proportion of data science tools that are only mentioned
ds_dstools_fitted <- colnames(ds_dstools_df)
ds_dstools_prop1 <- ds_dstools_prop[ds_dstools_prop$ds_tools %in% ds_dstools_fitted, ] %>% print()
ds_dstools_prop1 <- ds_dstools_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
ds_ds_score <- sapply(ds_dstools_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
ds_dstools_df
# Apply proportion scoring function
ds_ds_score1 <- sapply(colnames(ds_ds_score), function(x) ds_dstools_prop1$proportion[ds_dstools_prop1$ds_tools == x]*ds_ds_score[,x]) %>% print()
# Compute total data science tools score
ds_ds_score1 <- round(cbind(ds_ds_score1, total = rowSums(ds_ds_score1)), 2) %>% print()
ds_ds_score1 <- data.frame(ds_ds_score1)
rownames(ds_ds_score1) <- rownames(ds_dstools_df)
ds_ds_score1
ds_tskills_prop
# Filtering dataset with list of technical skills
ds_cols <- colnames(ds_matrix)
# Filtering dataset with list of data science tools
ds_cols <- colnames(ds_matrix)
ds_dstools_matrix1 <- ds_matrix[, ds_cols %in% ds_dstools_prop$ds_tools]
ds_dstools_df <- as.data.frame(ds_dstools_matrix1)
ds_dstools_df <- as.data.frame(ds_dstools_matrix1) %>% print()
# Filtering dataset with list of programming skills
ds_cols <- colnames(ds_matrix)
ds_prog_matrix1 <- ds_matrix[, ds_prog_cols %in% top_ds_prog_skills]
ds_prog_df <- as.data.frame(ds_prog_matrix1) %>% print()
ds_dstools_df <- as.data.frame(ds_dstools_matrix1) %>% print()
# Filtering dataset with list of technical skills
ds_cols <- colnames(ds_matrix)
ds_tskills_matrix1 <- ds_matrix[, ds_cols %in% ds_tskills_prop$tskills]
ds_dstools_df <- as.data.frame(ds_dstools_matrix1) %>% print()
# Filtering dataset with list of technical skills
ds_cols <- colnames(ds_matrix)
ds_tskills_matrix1 <- ds_matrix[, ds_cols %in% ds_tskills_prop$tskills]
ds_dstools_df <- as.data.frame(ds_tskills_matrix1) %>% print()
# Filtering dataset with list of technical skills
ds_cols <- colnames(ds_matrix)
ds_tskills_matrix1 <- ds_matrix[, ds_cols %in% ds_tskills_prop$tskills]
ds_tskills_df <- as.data.frame(ds_tskills_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
ds_tskills_fitted <- colnames(ds_tskills_df)
ds_tskills_prop1 <- ds_tskills_prop[ds_tskills_prop$tskills %in% ds_tskills_fitted, ] %>% print()
# Proportion of technical skills
ds_tskills_prop
# Compute log-weighted scoring
ds_tskills_score <- sapply(ds_tskills_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
ds_tskills_score1 <- sapply(colnames(ds_tskills_score), function(x) ds_tskills_prop$proportion[ds_tskills_prop$tskill == x]*ds_tskills_score[,x]) %>% print()
# Apply proportion scoring function
ds_tskills_score1 <- sapply(colnames(ds_tskills_score), function(x) ds_tskills_prop$proportion[ds_tskills_prop$tskills == x]*ds_tskills_score[,x]) %>% print()
# Compute total data science tools score
ds_tskills_score1 <- round(cbind(ds_tskills_score1, total = rowSums(ds_tskills_score1)), 2) %>% print()
ds_tskills_score1 <- data.frame(ds_tskills_score1)
rownames(ds_tskills_score1) <- rownames(ds_tskills_df)
ds_tskills_score1
# Proportion of technical skills
ds_softskill_prop
ds_softskill_matrix1 <- ds_matrix[, ds_cols %in% ds_softskill_prop$softskill]
ds_softskill_df <- as.data.frame(ds_softskill_matrix1) %>% print()
# Proportion of technical skills
ds_softskill_prop
ds_softskill_matrix1 <- ds_matrix[, ds_cols %in% ds_softskill_prop$softskill]
ds_softskill_df <- as.data.frame(ds_softskill_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
ds_softskill_fitted <- colnames(ds_softskill_df)
ds_softskill_prop1 <- ds_softskill_prop[ds_softskill_prop$softskill %in% ds_softskill_fitted, ] %>% print()
ds_softskill_prop1 <- ds_softskill_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
ds_softskill_score <- sapply(ds_softskill_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
ds_softskill_score1 <- sapply(colnames(ds_softskill_score), function(x) ds_softskill_prop1$proportion[ds_softskill_prop1$softskill == x]*ds_softskill_score[,x]) %>% print()
# Compute total data science tools score
ds_softskill_score1 <- round(cbind(ds_softskill_score1, total = rowSums(ds_softskill_score1)), 2) %>% print()
ds_softskill_score1 <- data.frame(ds_softskill_score1)
rownames(ds_softskill_score1) <- rownames(ds_softskill_df)
ds_softskill_score1
ds_prog_score1
ds_ds_score1
ds_tskills_score1
ds_softskill_score1
?data.frame
# ==============================================================================================================
# Total Score
ds_total <- data.frame(1:20)
ds_total
# ==============================================================================================================
# Total Score
ds_total <- data.frame(c("A", "B"))
ds_total
ds_softskill_score1
# ==============================================================================================================
# Total Score
ds_total <- data.frame(ds_softskill_score1$total)
ds_total
# ==============================================================================================================
# Total Score
ds_total <- data.frame(x = ds_softskill_score1$total)
ds_total
# ==============================================================================================================
# Total Score
ds_total <- data.frame(tskills = ds_tskills_score1$total, softskill = ds_softskill_score1$total)
ds_total
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1,
ds.tool = ds_ds_score1,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowsum(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
ds_total <- cbind(ds_total, grandtotal = rowsum(ds_total))
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
?arrange
ds_total %>%
arrange(grandtotal, ascending = F)
ds_total %>%
arrange(descending(grandtotal))
ds_total %>%
arrange(desc(grandtotal))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total %>%
arrange(desc(grandtotal))
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total %>%
arrange(desc(grandtotal))
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
ds_total %>%
arrange(desc(grandtotal))
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total[order(-grandtotal),]
ds_total[order(-grandtotal)]
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
class(ds_total)
ds_total[order(grandtotal)]
ds_total[, order(grandtotal)]
ds_total[order(grandtotal), ]
ds_total[order(ds_totalgrandtotal), ]
ds_total$grandtotal
ds_total[order(grandtotal), ]
ds_total
ds_total[order()]
ds_total[order(x)]
ds_total[order(grandtotal)]
ds_total[order("grandtotal")]
ds_total[order(-"grandtotal")]
ds_total[-order("grandtotal")]
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
ds_total[order-("grandtotal")]
ds_total[order("-grandtotal")]
ds_total[order(-"grandtotal")]
ds_total[order("grandtotal")]
# ==============================================================================================================
# Total Score
ds_total <- data.frame(p.lang = ds_prog_score1$total,
ds.tool = ds_ds_score1$total,
t.skill = ds_tskills_score1$total,
softskill = ds_softskill_score1$total)
ds_total <- cbind(ds_total, grandtotal = rowSums(ds_total))
rownames(ds_total) <- rownames(ds_softskill_df)
ds_total
ds_total[order("grandtotal")]
ds_total
ds_total[order(grandtotal)]
ds_total[order(-ds_total$grandtotal)]
ds_total[order(-ds_total$grandtotal), ]
library(quanteda)
library(pdftools)
library(tm)
# Analysing a folder of resumes (Data Scientist)
setwd("C:/Users/Tony/Desktop/Resume/Data Analyst")
ds_files <- list.files(pattern = "pdf$")
ds_files
da_files <- list.files(pattern = "pdf$")
da_files
# Apply pdf_text function
da_text <- lapply(da_files, pdf_text)
length(da_text) # 20 resumes
lapply(da_text, length) # List of pages per resume
head(da_text) # Read pdf-converted text files
# Create corpus (collection of documents of pdf)
da_corp <- Corpus(URISource(da_files),
readerControl = list(reader = readPDF))
class(da_corp) # VCorpus (Volatile Corpus)
da_dtm <- DocumentTermMatrix(da_corp)
da_dtm <- DocumentTermMatrix(da_corp)
da_matrix <- as.matrix(da_dtm)
da_matrix
ds_prog_skills_prop <- ds_prog_skills %>%
count(prog_lang, sort = TRUE) %>%
mutate(doc = "ds") %>% mutate(freq = n) %>% mutate(total = sum(n)) %>% mutate(proportion = n / sum (n)) %>%
select(-n) %>% print()
da_prog_skills_prop
ds_prog_skills_prop
# Obtain list of programming skills (Data Scientist)
top_da_prog_skills <- da_prog_skills_prop$prog_lang
top_da_prog_skills
# Filtering dataset with list of programming skills
da_cols <- colnames(da_matrix)
da_prog_matrix1 <- da_matrix[, da_prog_cols %in% top_da_prog_skills]
da_prog_matrix1 <- da_matrix[, da_cols %in% top_da_prog_skills]
da_prog_matrix1 <- da_matrix[, da_cols %in% top_da_prog_skills]
da_prog_df <- as.data.frame(da_prog_matrix1) %>% print()
# Compute new proportion of programming skills that are only mentioned
da_prog_skills_fitted <- colnames(da_prog_df)
da_prog_skills_prop1 <- da_prog_skills_prop[da_prog_skills_prop$prog_lang %in% da_prog_skills_fitted, ] %>% print()
da_prog_skills_prop1 <- da_prog_skills_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
da_prog_score <- sapply(da_prog_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
da_prog_score1 <- sapply(colnames(da_prog_score), function(x) da_prog_skills_prop1$proportion[da_prog_skills_prop1$prog_lang == x]*da_prog_score[,x]) %>% print()
# Compute total programming score
da_prog_score1 <- round(cbind(da_prog_score1, total = rowSums(da_prog_score1)), 2) %>% print()
da_prog_score1 <- data.frame(da_prog_score1)
rownames(da_prog_score1) <- rownames(da_prog_df)
ds_prog_score1
# Proportion of data science tools
da_dstools_prop
# Filtering dataset with list of data science tools
da_cols <- colnames(da_matrix)
da_dstools_matrix1 <- da_matrix[, da_cols %in% da_dstools_prop$ds_tools]
da_dstools_df <- as.data.frame(da_dstools_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
da_dstools_fitted <- colnames(da_dstools_df)
da_dstools_prop1 <- da_dstools_prop[da_dstools_prop$ds_tools %in% da_dstools_fitted, ] %>% print()
da_dstools_prop1 <- da_dstools_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
da_ds_score <- sapply(da_dstools_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
da_ds_score1 <- sapply(colnames(da_ds_score), function(x) da_dstools_prop1$proportion[da_dstools_prop1$ds_tools == x]*da_ds_score[,x]) %>% print()
# Compute total data science tools score
da_ds_score1 <- round(cbind(da_ds_score1, total = rowSums(da_ds_score1)), 2) %>% print()
da_ds_score1 <- data.frame(da_ds_score1)
rownames(da_ds_score1) <- rownames(da_dstools_df)
da_ds_score1
# Proportion of technical skills
da_tskills_prop
# Filtering dataset with list of technical skills
da_cols <- colnames(da_matrix)
da_tskills_matrix1 <- ds_matrix[, da_cols %in% da_tskills_prop$tskills]
da_tskills_df <- as.data.frame(da_tskills_matrix1) %>% print()
# Proportion of technical skills
da_tskills_prop
da_tskills_matrix1 <- ds_matrix[, da_cols %in% da_tskills_prop$tskills]
da_tskills_matrix1
da_tskills_prop$tskills
da_tskills_matrix1 <- da_matrix[, da_cols %in% da_tskills_prop$tskills]
da_tskills_df <- as.data.frame(da_tskills_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
da_tskills_fitted <- colnames(da_tskills_df)
# Compute new proportion of data science tools that are only mentioned
da_tskills_fitted <- colnames(da_tskills_df)
da_tskills_prop1 <- da_tskills_prop[da_tskills_prop$tskills %in% da_tskills_fitted, ] %>% print()
da_tskills_prop1 <- da_tskills_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
da_tskills_score <- sapply(da_tskills_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
ds_tskills_score1 <- sapply(colnames(da_tskills_score), function(x) da_tskills_prop$proportion[da_tskills_prop$tskills == x]*da_tskills_score[,x]) %>% print()
# Compute total technical skills score
da_tskills_score1 <- round(cbind(da_tskills_score1, total = rowSums(da_tskills_score1)), 2) %>% print()
# Apply proportion scoring function
da_tskills_score1 <- sapply(colnames(da_tskills_score), function(x) da_tskills_prop$proportion[da_tskills_prop$tskills == x]*da_tskills_score[,x]) %>% print()
# Compute total technical skills score
da_tskills_score1 <- round(cbind(da_tskills_score1, total = rowSums(da_tskills_score1)), 2) %>% print()
rownames(da_tskills_score1) <- rownames(da_tskills_df)
da_tskills_score1
# Proportion of technical skills
da_softskill_prop
# Filtering dataset with list of technical skills
da_cols <- colnames(da_matrix)
da_softskill_matrix1 <- da_matrix[, da_cols %in% da_softskill_prop$softskill]
da_softskill_df <- as.data.frame(da_softskill_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
da_softskill_fitted <- colnames(da_softskill_df)
da_softskill_prop1 <- da_softskill_prop[da_softskill_prop$softskill %in% da_softskill_fitted, ] %>% print()
# Proportion of technical skills
da_softskill_prop
da_softskill_prop1 <- da_softskill_prop[da_softskill_prop$softskill %in% da_softskill_fitted, ] %>% print()
da_softskill_prop1 <- da_softskill_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
da_softskill_score <- sapply(da_softskill_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
da_softskill_score1 <- sapply(colnames(da_softskill_score), function(x) da_softskill_prop1$proportion[da_softskill_prop1$softskill == x]*da_softskill_score[,x]) %>% print()
# Compute total data science tools score
da_softskill_score1 <- round(cbind(da_softskill_score1, total = rowSums(da_softskill_score1)), 2) %>% print()
da_softskill_score1 <- data.frame(da_softskill_score1)
rownames(da_softskill_score1) <- rownames(da_softskill_df)
da_softskill_score1
# ==============================================================================================================
# Total Score
da_total <- data.frame(p.lang = da_prog_score1$total,
ds.tool = da_ds_score1$total,
t.skill = da_tskills_score1$total,
softskill = da_softskill_score1$total)
da_tskills_score1
# ==============================================================================================================
# Total Score
da_total <- data.frame(p.lang = da_prog_score1$total,
ds.tool = da_ds_score1$total,
t.skill = da_tskills_score1$total,
softskill = da_softskill_score1$total)
da_tskills_score1
# ==============================================================================================================
# Total Score
da_total <- data.frame(p.lang = da_prog_score1$total,
ds.tool = da_ds_score1$total,
t.skill = da_tskills_score1$total,
softskill = da_softskill_score1$total)
# ==============================================================================================================
# Total Score
da_total <- data.frame(p.lang = da_prog_score1$total,
ds.tool = da_ds_score1$total,
t.skill = da_tskills_score1$total, softskill = da_softskill_score1$total)
da_tskills_score1$total
# Compute total technical skills score
da_tskills_score1 <- round(cbind(da_tskills_score1, total = rowSums(da_tskills_score1)), 2) %>% print()
da_tskills_score1 <- data.frame(da_tskills_score1)
rownames(da_tskills_score1) <- rownames(da_tskills_df)
da_tskills_score1
# ==============================================================================================================
# Total Score
da_total <- data.frame(p.lang = da_prog_score1$total,
ds.tool = da_ds_score1$total,
t.skill = da_tskills_score1$total,
softskill = da_softskill_score1$total)
da_total <- cbind(da_total, grandtotal = rowSums(da_total))
rownames(da_total) <- rownames(da_softskill_df)
da_total
da_total[order(-ds_total$grandtotal), ]
da_total[order(-da_total$grandtotal), ]
# Analysing a folder of resumes (Data Analyst)
setwd("C:/Users/Tony/Desktop/Resume/Data Engineer")
da_files <- list.files(pattern = "pdf$")
da_files
de_files <- list.files(pattern = "pdf$")
de_files
# Apply pdf_text function
de_text <- lapply(de_files, pdf_text)
length(de_text) # 20 resumes
lapply(de_text, length) # List of pages per resume
head(de_text) # Read pdf-converted text files
# Create corpus (collection of documents of pdf)
de_corp <- Corpus(URISource(de_files),
readerControl = list(reader = readPDF))
class(de_corp) # VCorpus (Volatile Corpus)
de_dtm <- DocumentTermMatrix(de_corp)
de_matrix <- as.matrix(de_dtm)
de_matrix
head(de_matrix)
de_matrix[1:5]
de_matrix[1:5, 1:5]
de_matrix[1:5, 1:10]
da_matrix[1:5, 1:10]
ds_matrix[1:5, 1:10]
ds_matrix[1:5, 1:10]
ds_matrix[1:5, 1:5]
de_prog_skills_prop
# Obtain list of programming skills (Data Scientist)
top_de_prog_skills <- de_prog_skills_prop$prog_lang
top_de_prog_skills
# Filtering dataset with list of programming skills
de_cols <- colnames(de_matrix)
de_prog_matrix1 <- de_matrix[, de_cols %in% top_de_prog_skills]
de_prog_df <- as.data.frame(de_prog_matrix1) %>% print()
# Compute new proportion of programming skills that are only mentioned
de_prog_skills_fitted <- colnames(de_prog_df)
de_prog_skills_prop1 <- de_prog_skills_prop[de_prog_skills_prop$prog_lang %in% de_prog_skills_fitted, ] %>% print()
de_prog_skills_prop1 <- de_prog_skills_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
de_prog_score <- sapply(de_prog_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
de_prog_score1 <- sapply(colnames(de_prog_score), function(x) de_prog_skills_prop1$proportion[de_prog_skills_prop1$prog_lang == x]*de_prog_score[,x]) %>% print()
de_prog_score1 <- data.frame(de_prog_score1)
# Compute total programming score
de_prog_score1 <- round(cbind(de_prog_score1, total = rowSums(de_prog_score1)), 2) %>% print()
de_prog_score1 <- data.frame(de_prog_score1)
rownames(de_prog_score1) <- rownames(de_prog_df)
de_prog_score1
# Compute total programming score
da_prog_score1 <- round(cbind(da_prog_score1, total = rowSums(da_prog_score1)), 2) %>% print()
da_prog_score1 <- data.frame(da_prog_score1)
rownames(da_prog_score1) <- rownames(da_prog_df)
da_prog_score1
# Proportion of data science tools
de_dstools_prop
# Filtering dataset with list of data science tools
de_cols <- colnames(de_matrix)
de_dstools_matrix1 <- de_matrix[, de_cols %in% de_dstools_prop$ds_tools]
de_dstools_df <- as.data.frame(de_dstools_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
de_dstools_fitted <- colnames(de_dstools_df)
de_dstools_prop1 <- de_dstools_prop[de_dstools_prop$ds_tools %in% de_dstools_fitted, ] %>% print()
de_dstools_prop1 <- de_dstools_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Proportion of data science tools
de_dstools_prop
# Compute log-weighted scoring
de_ds_score <- sapply(de_dstools_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
de_ds_score1 <- sapply(colnames(de_ds_score), function(x) de_dstools_prop$proportion[de_dstools_prop$ds_tools == x]*de_ds_score[,x]) %>% print()
# Compute total data science tools score
de_ds_score1 <- round(cbind(de_ds_score1, total = rowSums(de_ds_score1)), 2) %>% print()
de_ds_score1 <- data.frame(de_ds_score1)
rownames(de_ds_score1) <- rownames(de_dstools_df)
de_ds_score1
# Proportion of technical skills
de_tskills_prop
# Filtering dataset with list of technical skills
de_cols <- colnames(de_matrix)
de_tskills_matrix1 <- de_matrix[, de_cols %in% de_tskills_prop$tskills]
de_tskills_df <- as.data.frame(de_tskills_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
de_tskills_fitted <- colnames(de_tskills_df)
de_tskills_prop1 <- de_tskills_prop[de_tskills_prop$tskills %in% de_tskills_fitted, ] %>% print()
de_tskills_prop1 <- de_tskills_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
de_tskills_score <- sapply(de_tskills_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
de_tskills_score1 <- sapply(colnames(de_tskills_score), function(x) de_tskills_prop$proportion[de_tskills_prop$tskills == x]*de_tskills_score[,x]) %>% print()
# Compute total technical skills score
de_tskills_score1 <- round(cbind(de_tskills_score1, total = rowSums(de_tskills_score1)), 2) %>% print()
de_tskills_score1 <- data.frame(de_tskills_score1)
rownames(de_tskills_score1) <- rownames(de_tskills_df)
de_tskills_score1
# Proportion of technical skills
de_softskill_prop
# Filtering dataset with list of technical skills
de_cols <- colnames(de_matrix)
de_softskill_matrix1 <- de_matrix[, de_cols %in% de_softskill_prop$softskill]
de_softskill_df <- as.data.frame(de_softskill_matrix1) %>% print()
# Compute new proportion of data science tools that are only mentioned
de_softskill_fitted <- colnames(de_softskill_df)
de_softskill_prop1 <- de_softskill_prop[de_softskill_prop$softskill %in% de_softskill_fitted, ] %>% print()
de_softskill_prop1 <- de_softskill_prop1 %>% mutate(total = sum(freq)) %>% mutate(proportion = freq/total) %>% print()
# Compute log-weighted scoring
de_softskill_score <- sapply(de_softskill_df, function(x) ifelse(x > 0, 1 + log(x), 0)) %>%  print()
# Apply proportion scoring function
de_softskill_score1 <- sapply(colnames(de_softskill_score), function(x) de_softskill_prop1$proportion[de_softskill_prop1$softskill == x]*de_softskill_score[,x]) %>% print()
# Compute total data science tools score
de_softskill_score1 <- round(cbind(de_softskill_score1, total = rowSums(de_softskill_score1)), 2) %>% print()
de_softskill_score1 <- data.frame(de_softskill_score1)
rownames(de_softskill_score1) <- rownames(de_softskill_df)
de_softskill_score1
# ==============================================================================================================
# Total Score
de_total <- data.frame(p.lang = de_prog_score1$total,
ds.tool = de_ds_score1$total,
t.skill = de_tskills_score1$total,
softskill = de_softskill_score1$total)
de_total <- cbind(de_total, grandtotal = rowSums(de_total))
rownames(de_total) <- rownames(de_softskill_df)
de_total
de_total[order(-de_total$grandtotal), ]
de_total[order(-de_total$grandtotal), ]
